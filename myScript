#!/bin/bash

[[ -f ${HOME}/.myScript.private.sh ]] && source ${HOME}/.myScript.private.sh

##
# alias
##

# git alias
alias ga="git add"
alias grhh="git reset --hard HEAD"
alias glog="git log --decorate --oneline --graph HEAD"
alias gpl="git pull"
alias gpu='git push --set-upstream $(git remote) $(git branch --show-current)'
alias gcmsg="git commit -m"
alias gcl="git clone"
alias gcom="git checkout master"
alias gbnm="git checkout master && git checkout -b"
alias gd="git diff"
alias gdhh="git diff HEAD HEAD^"

alias ls="exa"
alias mv="mv -i" # overwrite prompt
alias rm="rip"
alias cp="xcp -n"
alias tnew="tmux new -s"
alias ssm="ssh-manager"
alias o="open"
alias c="pbcopy"
alias nvi="nvim"
alias vim="nvim"
alias vi="nvim"
alias gs="git status -s"
alias gll="lazygit"
alias rr="ranger"
alias ll="ls -alh"
alias k="kubectl"
alias T="([ ! -e /tmp/T ] && mkdir /tmp/T); cd /tmp/T"
alias sch="screenshot-handler"
#alias changelog="conventional-changelog -p conventionalcommits -i CHANGELOG.md -s"
alias agf="ag -l -g"
alias tt="fzf --preview 'bat --style=numbers --color=always --line-range :500 {}'"
alias localFirst="PATH=${HOME}/.local/bin:$PATH"
alias p="export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890"
alias rp="export https_proxy= http_proxy= all_proxy="
alias charles_proxy="export https_proxy=http://127.0.0.1:12580 http_proxy=http://127.0.0.1:12580"
alias yabai-startup="killall yabai; nohup yabai &> /dev/null &; killall spacebar; nohup spacebar &> /dev/null &;"
alias preview="open -a Preview"

##
# path
##
export JAVA_HOME="/Library/Java/JavaVirtualMachines/amazon-corretto-11.jdk/Contents/Home"
export PATH=${PATH}:${JAVA_HOME}/bin

export GRADLE_USER_HOME="${HOME}/.m2/repository/"

export PATH=${PATH}:${HOME}/go/bin
export PATH=${PATH}:${HOME}/.local/bin
export PATH=${PATH}:${HOME}/grampro/jmeter/bin

# GNU paths
# install GNU tools in place of mac by `brew install coreutils findutils gnu-tar gnu-sed gawk gnutls gnu-indent gnu-getopt grep`
export PATH="/usr/local/opt/findutils/libexec/gnubin:$PATH"
PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"
PATH="/usr/local/opt/gnu-indent/libexec/gnubin:$PATH"
PATH="/usr/local/opt/findutils/libexec/gnubin:$PATH"
PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"

# GO config
export GO111MODULE="on"

# node path
export NODE_PATH=/usr/local/lib/node_modules
export PATH=$PATH:$NODE_PATH

# krew
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# msf
export PATH="/opt/metasploit-framework/bin:$PATH"

# global config
# brew 禁止自动更新
export HOMEBREW_NO_AUTO_UPDATE=1
# kubectl
export KUBE_EDITOR="/usr/local/bin/nvim"

switch_java() {
  if [ $# = 0 ]; then
    echo "switch_java <version>  version: 8, 11, 14"
  else
    case "$1" in
      "8")
        export JAVA_HOME="/Library/Java/JavaVirtualMachines/zulu_jdk8_arm/zulu-8.jdk/Contents/Home"
        export PATH=${PATH}:${JAVA_HOME}/bin
        ;;
      "11")
        export JAVA_HOME="/Library/Java/JavaVirtualMachines/amazon-corretto-11.jdk/Contents/Home/"
        export PATH=${PATH}:${JAVA_HOME}/bin
        ;;
      "14")
        export JAVA_HOME="/Library/Java/JavaVirtualMachines/openjdk-14.0.1.jdk/Contents/Home/"
        export PATH=${PATH}:${JAVA_HOME}/bin
        ;;
      "17")
        export JAVA_HOME="/Library/Java/JavaVirtualMachines/amazon-corretto-17.jdk/Contents/Home/"
        export PATH=${PATH}:${JAVA_HOME}/bin
        ;;
    esac
 fi
}

goto() {
	cd "$(dirname $1)"
}

note() {
  NOTE_PATH="${HOME}/Documents/note"
  [[ ! -d $PATH ]] && mkdir -p $NOTE_PATH
  dt=$(date +"%Y-%m-%d_%H:%M:%S")
  fileName="$dt.md"
  if [ "$1" = "-a" ]; then
    recentFile=$(ls -t $NOTE_PATH | head -n1)
    [[ ! -z $recentFile ]] && fileName=$recentFile
  fi
  nvim $NOTE_PATH/$fileName
}

qr() {
  tmp_qr_path="tmp.png"
  if [ $# -eq 1 ]
  then
    text=$1 
  else
    # 默认使用剪贴板
    text=`xclip -o`
  fi
  qrencode $text -o $tmp_qr_path -s 7
  xviewer $tmp_qr_path
  rm $tmp_qr_path
}

# photoscaner
# 为了快捷，默认读取pictures文件夹下的最新的图片
# 只接收 o(ocr) b(base64) u(upload)
pho() {
screenshotPath="${HOME}/Pictures/screenshot/"

curPath=$( pwd )
if [ $# -eq 2 ]
then 
  if [ "${2:0:1}" = "/" ]
  then
    # 绝对路径
    pic_file="$2"
  else
    # 默认当前路径,有../类似的相对路径就不处理了
    pic_file="$curPath/$2"
  fi

  if [ $1 = 'cp' ];then 
    pic_file=$(ls -t $screenshotPath | head -1)
    pic_file="$screenshotPath$pic_file"
    cp "${pic_file}" "$2"
    return 0
  fi
elif [ $# -eq 1 ]
then
  pic_file=$(ls -t $screenshotPath | head -1)
  pic_file="$screenshotPath$pic_file"
fi
python3 ${HOME}/.myjiaoben/pho/photoscaner.py $1 ${pic_file}
cd $curPath
}

gnb() {
if [ -z "`git br | grep -E "\btest/authority\b"`" ]
then
	git checkout -b ${1} && git push -u origin ${1}:${1}
else
	git checkout ${1} && git push -u origin ${1}:${1}
fi
}

# changelog
changelog() {
  local base_command() {
    conventional-changelog -p conventionalcommits -i CHANGELOG.md -s $*
  }
  local help() {
    echo "changelog [-v version] [convertional-changelog args]"
  }
  
  local version=""
  local depthArg=""

  while getopts 'hv:r:' OPT; do
    case $OPT in
      h) help; return;;
      v) version="$OPTARG";;
      r) depthArg="-r $OPTARG";;
    esac
  done

  [[ ! -z $depthArg ]] && echo "depth: ${depthArg:3}"
  echo "version is:$version"

  if [[ ! -z $version ]]; then
    tmp_file="/tmp/$(uuidgen).json"
    echo "{\"version\": \"${version}\"}" > $tmp_file
    base_command ${depthArg} -c $tmp_file
  else
    base_command ${depthArg}
  fi
}

# navi shortcuts
ch() {
  [[ $# -eq 0 ]] && navi || navi --query $*
}

# latest file
lt() {
  local targetFolder=${1:-$PWD}
  local fileName=$(ls -t $targetFolder | head -n 1)
  echo ${targetFolder%%/}/${fileName}
}

# mkdir and cd
take() {
  mkdir -p "$1" && cd "$1"
}

# 使用rsa加密文本，加密内容存储在 ${HOME}/.pwd/$1 中
encrypt_pwd() {
  mkdir -p ${HOME}/.pwd
  rsaKey="${HOME}/.ssh/pwd_rsa"
  PWD_FOLDER="${HOME}/.pwd"
  pwdName="$1"
  
  mkdir -p ${PWD_FOLDER}
  [[ ! -f $rsaKey ]] && openssl genrsa -out $rsaKey 2048

  read -s "plainText?Your password: "
  echo "$plainText" | openssl rsautl -inkey $rsaKey -encrypt > $PWD_FOLDER/$pwdName
  echo "\nYour encrypted password have been store in ${PWD_FOLDER}/${pwdName}."
  echo "Use \033[36mdecrypt_pwd $pwdName\033[0m to fetch plain password."
}

# 使用rsa解密文本，解密 ${HOME}/.pwd/$1 文件中的文本
decrypt_pwd() {
  rsaSecretKey="${HOME}/.ssh/pwd_rsa"
  PWD_FOLDER="${HOME}/.pwd"
  pwdPath="$PWD_FOLDER/$1"

  if [ ! -f $pwdPath ]; then
    echo "Password file not exist.\n\nAvaliable password:"
    ls "$PWD_FOLDER" | xargs -I{} echo "  * {}"
  else
    openssl rsautl -inkey $rsaSecretKey -decrypt < $pwdPath
  fi
}

flush_dns() {
  sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder
}
